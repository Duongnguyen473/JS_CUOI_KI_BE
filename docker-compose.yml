services:
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: nestjs-app
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - redis
  #   volumes:
  #     - ./src:/app/src
  #     - ./logs:/app/logs
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: nestjs-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: nestjs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: nestjs-pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - app-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
